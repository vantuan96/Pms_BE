# A properly formed Git commit subject line should always be able to complete
# the following sentence
#      If applied, this commit will your subject line here
#
#  Example
[type](optional scope) [subject]
#
[optional body]
#

#  Type
# Must be one of the following
#  BUILD - Build related changes
#  CHORE - Build process or auxiliary tool changes
#  DOCS - Documentation only changes
#  FEAT - A new feature
#  FIX - A bug fix
#  PERF - A code change that improves performance
#  REFACTOR - A code change that neither fixes a bug or adds a feature
#  REVERT - Reverting things
#  STYLE - Markup, white-space, formatting, missing semi-colons...
#  TEST - Adding missing tests

#  Subject
# The subject contains a succint description of the change
#  Use the imperative, present tense change not changed nor changes
#  No dot (.) at the end.

#  Scope
# A scope may be provided to a commitâ€™s type, to provide additional contextual information
# and is contained within parenthesis, e.g., feat(parser) add ability to parse arrays.

#  Body
# Just as in the subject, use the imperative, present tense change not changed nor changes.
# The body should include the motivation for the change and contrast this with previous behavior.

#  Rules
# The 7 rules of a great commit message
#    1. Separate subject from body with a blank line
#    2. Limit the subject line to 50 characters
#    3. Capitalize the subject line
#    4. Do not end the subject line with a period
#    5. Use the imperative mood in the subject line
#    6. Wrap the body at 72 characters
#    7. Use the body to explain what and why vs. how